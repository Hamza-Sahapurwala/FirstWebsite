/* * This is a css file
* CSS - Cascading Style Sheets
* Let's do something to show css works
*/

/* ! Cascade (Order) */

/* ! Rule For CSS: */

/* * If they are two conflicting styles, like 2 spans right one after another in CSS files, the lower one will be applyed */

/* * Whichever of the same selector is at the lower order, that will be used for the styling */

/* p{
    color: red;
}
p{
    color: black;
}    
*/

/* * The color: black style will be applied as it the last thing that is encountered by the browser */

/* ! Specificity */

/* ! Rule For CSS */

/* * If there are different selectors styling the same element and there is some conflict in some attribute, the selector which is more 'specific' about the element, wins and it becomes the styler  */

/* * General Rule For Selection:
    * ID Selector(First)
    * Class Selector(Second)
    * Others(Third)
*/

/* * There are online Specificity Calculators(use that) */

/* * Specifity acts on a score, where the higher score specifity wins */

/* * ID is given 100's place, Class is given 10's place and elements are given Digit's place */

/* * It comes out into a 3-digit no. like this _ _ _ and in this the no. of all the ids,classes and elements of the selector are put in the respective places and then compared */

/* * And the higher score selector will style the thing according to it's settings */

/* * This 3-digit no. doesn't act like normal no. system, we could 50 element selectors but 1 class/id selector can outclass them style the specific element */

/* ! Remember, it only wins on giving the style of the attribute that has come into conflict between 2 or more selectors,
   ! other styles which don't conflict will still be applied even from both the lower and higher score selectors
*/

/* ? NOTE: Inline Styles have more speciality than others that have been discussed */

/* * Avoid Inline styles for these reasons */

/* * Also there exists something known as !important */

/* * It is kept after the attribute in question, e.g. color: red !important */

/* * And !important automatically becomes the default style for that while ignoring specificity */

/* ! Inheritance */

/* * Like with the universal selector, if we give the body something styles, it will adopted by most(only inputs and buttons don't adopt inherited styles) tags inside the body */

/* * If you want to force input to adopt, use inherit. e.g */

/* 
body{
    color: red;
}

input,button{
    color: inherit;
}
*/

/* ! Above code only works when the input and button are present inside the body tag */

/* ! CSS Units */

/* ! Percentage: */
/* * It's used to percentage of the parent element and apply it the given element, It's a relative scale */
/* * For example: width = 50% means we are setting it to half the size of the parent element */
/* * Example 2: line-height = 50%, half the font size of the element is applied */
/* * Used mainly in setting width and height */

/* ! Ems: */
/* * Relative Units */
/* * If we set the font size of a child element as 1em, it will take the same size as the parent element */
/* * 2ems will be double the size of the parent element */
/* * eg: div{
*  font-size:20px;
*}
*p{ This p is nested inside the div
* font-size:2em; the text stored under p elements have 40px as their font size
* margin-left:1em; This also increases with increase of font-size under p
*}*/
/* * ems are basically used for appropriate scaling up of elements w.r.t. to the parent tags */
/* * It makes sense to use ems only in nested elements situation */

/* ? Problems with Ems: */

/* * With more nested elements, the size of the elements can exponentially increase for the most nested element and vice versa */
/* * Like if we have lists inside list, the most nested list item will have the size either blown up or shrunk down to a tiny level */
/* * To overcome that, we use rem */

/* ! Rems */
/* * Known as Root ems */
/* * It takes the root html's sizes (IMP) */
/* * e.g. if root html's font size if 20 px, 1rem is 20px, 2rem is 40px and so on AND this applies to the whole file */
/* * Therefore, severely nested elements are not blown up or shrunk down too much */
/* * Therefore, use rems for nested elements */

/* ! Box Model */

/* * In CSS, every element is considered to a box, like a box which surrounds the content */

/* * Terms in the Box Model:

    ? Margin: The distance between two boxes
    
    ? Padding: The distance between the actual content and the border of the box
    
    ? Height: The height of the content space inside the box
    
    ? Width: The width of the content space inside the box
    
*/

/* ! Border */

/* * We can style the borders of any elements we have */

/* * Border Terms: */

/*  ? border-width: It sets the width of the border

? border-color: Set's the color of the border

? border-style: Set's the style of the border(if it's solid, dotted,etc. In Default, we can't see the border) */

/* * We have the border attribute which can take all of the above but in one line */

/* * The order is border[-top/bottom/left/right]: width | style | color */

/* * border-radius: This is used to set rounded borders for the elements */

/* ! Padding */

/* * It is the measurement of space between the content box and the border */

/* * We can change the padding on each individually(using padding-left, padding-right, etc.) or set each side the same distance using just padding */

/* * padding: (for 1 value) for_all_four_sides, 
  * padding: (for 2 values) vertical horizontal, 
  * padding: (for 3 values) top horizontal bottom, 
  * padding: (for 4 values) top right bottom left */

/* ! Margin */

/* * It is the distance between the borders of two elements */

/* * Similar to padding, we can change the values of the margin like so:
  * margin: (for 1 value) for_all_four_sides, 
  * margin: (for 2 values) vertical horizontal, 
  * margin: (for 3 values) top horizontal bottom, 
  * margin: (for 4 values) top right bottom left */

/* ! Display */

/* * Used to change if an element is inline or block */

/* * For Inline elements: Width, height, margin and padding are ignored when putting them next ot other inline elements */

/* * display: inline-block (This removes the limitations of inline elements and help us change the width, height, margin and padding) */

/* * If display:none, the element is not displayed and it doesn't afect other elements */

h1 { /* * The Background colour is placed within these boundaries */
  height: 50px;

  width: 200px;

  border-width: 5px; /* * This will add extra 10x10 px(5px from each side) to the content box as the box width has been increased */

  border-color: azure;

  border-style: solid;

  box-sizing: border-box; /* * This will take up 10x10px(5px from each side) so the actual content gets 40x190 space */

  border-bottom-style: none; /* * We can specify, like in this example, the styles of each side of the border */

  border-top: 5px groove white;

  border-radius: 10px;

/*   padding-left: 10px;

  padding-top: 100px; */

  padding: 10px 20px 30px 40px;

  margin: 0px 0px 0px 0px;

  display: inline; /* * All the elements will now become inline elements */
}

/* ! Selectors */

/* * The tag name like h1,a,br is needed to style them using CSS */

/* ! Color Attribute */

/* * Assigns colour to the text available */

/* ! Background-Color Attribute */

/* * Assigns only colour to the background of the given text block */

/* ! Different ways of using colours in CSS */

/* ! RGB(redvalue, greenvalue, bluevalue) */

/* * There are 140 named colours, which are very limited */

/* * To access other colours we use rgb(redvalue, greenvalue, bluevalue) */

/* * Each value can go b/w 0-255 both inclusive */

/* * This helps to tune which colour we want specifically */

/* * We can the values for the colour we want using colour picker/pallettes online */

/* * It's an additive colour system */

/* ! Hexadecimal System */

/* * By  using the hexadecimal system, colours are assigned some value, which helps us pick us the shade of colour we want */

/* * The syntax is: #000000 (This is black)*/

/* * The first two characters after # is for the red, the next two for green and last two for blue */

/* ? Protip: if the same characters are repeating(#000000), it can be shorten down to #000 and it can be applied to any hexcolour code which has repeating characters for a particular colour channel */

/* * Same as with rgb, use colour picker/pallettes online for choosing any specific colour */

/* * And it's additive colour system too */

/* ! Text Align */

/* * It tells the text where it should be */

/* * The nuance is that the text will be aligned on the space given to the said element block, not on the webpage itself */

/* * We can alter how much space is given to each tag to use text-align more efficiently */

/* ! Font Weight */

/* * Basically, we can set the text to bold, bolder or normal using those keywords and no. */

/* * normal = 400 */

button {
  font-weight: bolder; /* * Makes the text inside the button bolder */

  color: magenta; /* * The text in the button changes the colours*/
}

/* ! Text Decoration */

/* * It helps us puts underline, overline, line-through and stuff */

/* * We can also specify the colour of the line and the style of the line */

/* * Can be used to remove the default underlines in anchor tags */

/* * Syntax: text-decoration: [colour(default is black)] underline [wavy, dotted, etc.]; */

/* ! Line-Height */

/* * Adds extra space b/w lines of text */

/* * The no. given is multiplies by the font size of the text to give the appropriate line space */

p {
  line-height: 1;

  /* letter-spacing: 10px; */

  /* font-size: 0px; */
}

/* ! Letter-Spacing */

/* * Adds space inbetween the characters of the letters */

/* ! Font Size */

/* * We can set the font size of the text */

/* * The font can be set by either absolute units(pixels, cm, in(inches), etc) or by relative units(em, rem, vh, vw, etc) */

/* * Pixel is used everywhere and 1px for anything is same as the 1px of any other thing but it's not good for responsive sites as pixel size changes in each website */

/* ! Font-Family */

/* * We can assign fonts to the text */

/* * It relies on the built-in fonts in the user browser */

/* * We can assign a primary font but because of the browsers may not come in built in with that font, we can assign back-up fonts */

/* ! Selector List */

/* * We can select multiple elements by just putting a comma */

h1,
h2 {
  color: #0ff; /* * Can be expanded to #00FFFF */

  background-color: rgb(0, 0, 0); /* * This gives us black */

  text-align: center; /* * All the h1 tag texts are put in the centre */

  text-decoration: gray underline solid;

  font-family: "Times New Roman", Times, serif; /* * If the browser don't have Times New Roman, the Times font is used and the same for serif */
}

/* *  We see that all the h1 tags turn to aqua, that means our css is linked! */

/* ! Universal Selector */

/* * All the elements are selected regardless of their type and will be applied the gived style */

/* * Not a good idea to use it */

/* * Thought the syntax is: */

* {
  background-color: red;
}

/* ! ID Selector */

/* * We can select any specific element using just their id */

/* * Syntax: #idofthetag{styles} */

#username {
  color: blueviolet; /* * This makes the input texts blue violet of the username input tag  */
}

/* ! Class Selector */

/* * They are used to group style some tags */

/* * we use . instead of # to define class selectors */

.datainput {
  background-color: white; /* * The tags is class name datainput have their background changed to white */
}

/* ! Descendent Selector */

/* * Used for selecting elements inside other elements such as any anchor tags present inside the paragraph tag */

/* * They are used to specify tags to style which are inside other specific tags */

/* * We can do it infinite no. of specifications(depending on the html, of course) */

/* * Syntax: grandfather father .... sonwhichwearegonnastyle{} */

/* * We can also put classes and ids are the father element and style the elements inside them */

li a {
  /* * Removes the lines below all the anchor tags present in any li element */

  /* * The li tags are themselves have not been styled, only the present anchor tags have been */

  text-decoration: none;
}

/* ! Adjacent Selector */

/* * Used to select elements which are right after some other element */

/* * like if there is a p after a h1, we write it as h1 + p */

/* * This will affect all the p tags which are just after h1 tags */

h1 + p {
  /* * Only the p tags after an H1 */
  background-color: white;
}

/* ! Direct Descendent Selector */

/* * Like a Descendent Selector, just that they should not be nested in anything else */

/* * Eg 
<p>
<a></a>
<p><a></a></p>
</p>
*/

/* * For the above example, only the anchor tag not inside any other tag is effected */

/* * Syntax: Father > Child */

form > p > label {
  /* * P and Label tags which are not nested in anything else are only effected */
  background-color: white;
}

/* ! Attribute selector */

/* * As in it's name, it selects and styles based on if the element contains that particular attribute */

/* * Majorly used for differentiating between the styles of different input tags */

/* * They are case-sensitive */

input[type="password"] {
  /* * Only those input tags whose attributes are set to password are affected */
  color: aqua;
}

/* * If we want to select on the basis of classes */

/* * We can do it in 2 ways */

/* * nameoftag[class = "nameofclass"] */

/* * nameoftag.nameofclass */

/* input.inputclass{
    background-color: green; /* Changes the bg colour of the input tags of those class attribute */
/*} */

/* * There are other types of things we can put inplace of the = sign */

/* * attribute *= something, finds that specific attribute has that word or not */

/* * attribute $= .something, only styles those tags which have attributes which ends with the .something */

/* ! Psuedo Classes */

/* * What changes should the tags show when any actions occur to them */

/* * Syntax: tag:action */

button:hover {
  /* * Whenever the mouse hovers on them, the buttons change colours */
  background-color: aqua;
}

button:active {
  /* * When the button is being pressed, it changes to this colour */
  background-color: blueviolet;
}

input[type="radio"]:checked {
  /* * When the checkbox or radio is checked, then it will be styled like this */
  color: green;
}

/* * There is something known as nth-of-type() psuedo class */

/* * It selects the nth tag from repeating tags, nth-of-type(3) will select the 3rd tag of that type */

/* * If we want to select every 3 tag from the repeating tags, nth-of-type(3n) */

/* * If we want to select even or odd only, nth-of-type(even/odd) */

/*button:nth-of-type(2n){
    background-color: green;
} */

/* ! Pseudo Elements */

/* * Used to select particular parts of a tag, like the first letter written in the h1 tag */

/* * Syntax: tag::pseudo-element */

/* * If the tag is not specified, it will be applied to the whole html document */

h2::first-letter {
/* * All the first letters for every h2 tag is effected */
font-size: 50px;
}

/* * Other Pseudo Elements: */

/* ! ::first-line: the first line of the tag is affected. Used majorly on paragraph tags */

/* ! ::selection: When ever you select some text, like for copying and stuff, we can set what happens to the text while that is happening  */

/* ! See-Through Colours (Alpha and Opacity) */

/* Remember rgb() thing for colours, yea just add an a, so rgba() */

/* the a part ranges from 0 to 1 and it specifies if we can 'see through' the colour */

/* 0 means the colour will be visible while, 1 means the background colour will be visible, not the colour we have specified */

/* Opacity by itself is a css element which has range of 0 to 1.(Same reasoning for 0 and 1 above) */

/* Opacity effects all the child tags and the text present inside the tag we are adding styles too(So it creates shades which we can use to beautify our websites with) */

/* ! Position Property */

/* * Position property is used to set the position of the element on the page */

/* * Position property will help us use other properties like top, bottom, left, right, extra. */

/* * Position can be static, relative, absolute, fixed and sticky */

/* ! Position: Static */

/* * The element doesn't move from its place even if top, bottom stuff is applied */

/* ! Position: Relative */

/* * The element moves w.r.t where it was before */

/* #section{
  position: relative;
  top: 100px;
} */

/* * This will move that section 100px to the bottom */

/* * Similarly, if you use left, it will move the section 100px to the right and vice versa */

/* ! Position: Absolute */

/* * If we set any element's position as absolute, the other elements present around it act like it doesn't exist and they will take the absolute elements place */

/* * It will be positioned w.r.t the parent element(if any) or else to the previous block */

/* * very confusing, read the documentation :) */

/* ! Postion: Fixed */

/* * This helps us make fixed navbars at top */

/* * So even if you scroll the page, that element comes down with you */

/* * It's fixed relative to the screen and will not go away, kinda like the AI chatbot message icon which will scroll down with the page */

/* * You do have to set it at some position */

/* ! Position: Sticky */

/* * When you combine relative and fixed */

/* * You set a top and after you scroll down the element, the element travels with you */

/* * Kinda like in those websites which ask for email login for getting their stuff */

/* ! CSS Transforms */

/* * Like on photoshop, we can transform an image into something, similarly we can do that for elements on a website using css */

/* * All the transforms you apply will affect the content present in the element and the child elements */

/* ! transform: rotate(); */

/* * It takes in the values of either degrees(deg), radians(rad), turns(turn) or gradians(grad) and rotates the element by that much */

/* * e.g. transform: rotate(45deg); This rotates the element by 45 degrees from its mean position */

/* * There is rotatex, rotatey, rotatez and rotate3d */

/* ! transform-origin: ; */

/* * To specify from where do apply the transform (like in the case above, it is ,by default, center but we can change to rotate at the point of top, top-right, top-left, bottom-right, bottom-left, bottom */

/* * e.g. transform-orgin: top-right; This will apply the transform while keeping the point of transform as the top right of the element */

/* ! transform: scale() */

/* * We can scale the element to a bigger or smaller size */

/* * e.g. transform: scale(2,1); Scales it twice on the x axis while keeping it same on the y axis */

/* * There is scalex, scaley, scalez and scale3d */

/* ! transform: translate() */

/* * We can move elements around using translate */

/* * e.g. transform: translate(-2px,2px); Moves the element 2px to the left and 2px to the top */

/* * e.g. transform: translatex(2px); This moves the element by 2px to the right */

/* * There is also translatey and translatez */

/* ! transform: skew() */

/* * Skews(???) the element by input degrees */

/* * e.g. transform: skew(30deg, 20deg); skews the element by 30 degrees on the x axis and 20 degrees on the y axis */

/* ! Using different transforms together */

/* * Just put some space between them */

/* * transform: rotate(30deg) scale(2px,2px) translate(2px, 2px); */
