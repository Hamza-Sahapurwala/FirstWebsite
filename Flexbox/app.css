body {
    font-family: 'Open Sans', sans-serif; /* * Open Sans is the default font while sans-serif is a fallback option */
}
h1 {
    text-align: center; /* * So that the text is at the centre */
}
#container {
    background-color: #003049;
    width: 90%;
    /* height: 500px; */
    margin: 0 auto; /* * So that this section is in the middle of the screen */
    border: 5px solid #003049;
    display: flex; /* * This tells all the divs to be in line and not one after another(as by default, dives are one after another ) */
    /* ! The above statement lets us use Flexbox, so write the above statement when you want to use flexbox */

    /* ! Flexbox Model */
    /* * It consists of 2 axis: Main Axis(goes from left to right) and Cross Axis(goes from Top to Bottom) */
    /* * Whenever css is in flexbox mode, by default we are using the main axis, so all the elements become inline elements */
    /* * We can reverse the direction of main axis and also make the elements follow the cross axis if we want to using: */

    /* ! flex-direction */

    /* * It lets change the direction and axis of the elements */
    /* * Elements are chosen by the order they are written in the html file */

    flex-direction: row; /* * Default: All elements start from left and go to right */
    /*flex-direction: row-reverse; /* * All elements start from right and go to left */
    /*flex-direction: column; /* * All the elements follow the cross axis */
    /*flex-direction: column-reverse; /* * All elements go from bottom to top */

    /* ! justify-content */

    /* * We can specify how the content is on the page */
    /* * It depends a lot on the flex-direction */

    /*justify-content: flex-start; /* * Elements are kept at the place specified by the flex-direction */
    justify-content: center; /* * Elements are kept at the centre of the flexbox */
    /*justify-content: flex-end; /* * Elements are pushed to the end of the box(that is, the (depending on flex direction)final element touches the container at the other end) */
    /*justify-content: space-between; /* * There will be spaces assigned between each element(these spaces come from any extra space left from flex-direction) but not on the extreme ends of the first and final element */
    /*justify-content: space-around; /* * Similar to space-between, just that there is space for the extreme ends of the first and final element so that they don't touch the end of the container */
    /*justify-content: space-evenly; /* * Similar to space-between, just that spaces are the same for all the elements and between the first and final element and container */

    /* ! flex-wrap */

    /* * We can tell the elements to go the next line(or column) if we don't want the elements to be squashed together in any axis in the container */

    /* * It has 3 modes: wrap, wrap-reversed and nowrap */

    /* ? I had to change the flex direction to column to show as an accurate example */

    flex-wrap: wrap; /* * As each div takes 200px each and they are squashed in 500px, we tell each div to take their space and if the next div doesn't have any left, we tell it to go the next (in this case)column */
    /*flex-wrap: wrap-reverse; /* * Just reverses the starting positions of the elements when they were in wrap */

    /* ! align-items */

    /* * Helps us keep the elements either at the top of the container or at the bottom of the container while keeping the same values of flex-direction and justify-content */
    /* * Basically, it just tells where the element will be at the cross axis */
    /* * Also the cross axis will change depending on the main axis: if the main axis is horizontal, cross axis is vertical and vice versa */
    /* ? Here the main axis is horizontal(flex-direction: row), so cross axis is vertical */

    align-items: flex-start;
    /* * if flex-direction is row; this tells us that the elements will be at the top of the container */
    /* * if flex-direction is column; this tells us that the elements will be at the left of the container */

    /*align-items: flex-end;
    /* * if flex-direction is row; this tells us that the elements will be at the end of the container */
    /* * if flex-direction is column; this tells us that the elements will be at the right of the container */

    /*align-items: center; /* * Elements are at the center of the cross axis */

    /*align-items: baseline; /* * This aligns the elements so that the text inside them are considered on the same line(even if the font sizes are different) */

    /* ! align-content */

    /* * If there are multiple rows or columns created by flex-wrap or other things, we can tell each to have some space between each row and column */

    /* * If the element goes to 2 rows, we can use align-content to put space or do other stuff in between the rows and the same applies for columns */

    /* ? I had to switch on flex-wrap, keep flex-direction at column, align-items at flex-end and justify-content as center for a better example */

    /* ! align-content only works if flex-wrap is on */

    /*align-content: center; /* * It removes all column/row space between the elements so that they come to they come to the center of the container */

    /*align-content: flex-start; /* * Removes all column/row space and moves the content to the left of the screen */

    /*align-content: space-between; /* * Puts enough space between each column/row so that the last column/row will touch the other end of the container while the first column/row touches the container at their end */
}

/* ! align-self */

/* * Similar to align-items, just that it can only be applied to one element at a time */

/* * It concerns itself with the cross-axis */

/* ? I had to keep flex-direction as row, switch off align-content and keep align-items at flex-start for an accurate example */

div:nth-of-type(3){
    align-self: center; /* * Pushes the third element to center of the container while the other elements follow the align-items rule */
}

/* ! flex-basis */

/* * Defines initial size of element before additional space is distributed(like before using space-evenly) */

/* ! flex-grow */

/* * Controls amount of available space an element should take up.(Takes in unit-less value) */

/* ! flex-shrink */

/* * if items are larger than container size, they shrink according to the value set by this property */

/* ! if min/max-width/height is set, it will follow that */

/* ? Had to switch of height of the container */

#container div{ /* * This puts the coloured divs on the screen */
    width: 200px;
    height: 200px;
    flex-basis: 200px; 
    /* * if flex-direction:row, then width is set to this value(this overrides that value) */
    /* * if flex-direction:column, then height is set to this value(this overrides that value) */
    /* ? flex-basis is just used instead the height and width stuff to set the size of the elements (and it resizes the container if it doesn't fit and the container doesn't have any hardcoded values) */
    flex-grow: 1;
    /* * It actually sets the ratio of free space that can be taken by each element .i.e. 1:1:1:1:1 (Ratio of free space taken by the 5 elements) */
    /* * Can be used for individual elements too(Like we can set ratio of free space taken by an individual element) */
    /* * And it will change it's size according to the screen size (cause it's flex box) */
    flex-shrink: 1;
    /* * Same description and working like flex-grow */
    /* ? Just that, it sets the ratio of shrinking */
    /* * Works when the elements are too big for the container */
}

/* ! flex */

/* * The above 3 can be used in a combined way using just flex */

/* * flex: flex-grow-value flex-shrink-value flex-basis-value; */

/* * You can use 2 or 1 input values at a time, just put a unit(%,rems,ems,etc) for flex-basis values, only then it can recognize it as flex-basis values */

main{
    width: 80%;
    margin: 0 auto;
    border: 5px solid black;
    height: 500px;
    display: flex;
}

main .sidebar{
    background-color: blueviolet;
    border: 2px solid white;
    flex: 1 2 300px; /* * I have set flex-grow:1 flex-shrink:2 flex-basis: 300px */
}

main .maincontent{
    background-color: cyan;
    flex: 1 600px; /* * flex-grow:1 flex-basis:600px */
}