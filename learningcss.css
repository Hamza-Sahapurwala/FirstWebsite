/* * This is a css file
* CSS - Cascading Style Sheets
* Let's do something to show css works
*/

/* ! Cascade (Order) */

/* ! Rule For CSS: */

/* * If they are two conflicting styles, like 2 spans right one after another in CSS files, the lower one will be applyed */

/* * Whichever of the same selector is at the lower order, that will be used for the styling */

/* p{
    color: red;
}
p{
    color: black;
}    
*/

/* * The color: black style will be applied as it the last thing that is encountered by the browser */

/* ! Specificity */

/* ! Rule For CSS */

/* * If there are different selectors styling the same element and there is some conflict in some attribute, the selector which is more 'specific' about the element, wins and it becomes the styler  */

/* * General Rule For Selection:
    * ID Selector(First)
    * Class Selector(Second)
    * Others(Third)
*/

/* * There are online Specificity Calculators(use that) */

/* * Specifity acts on a score, where the higher score specifity wins */

/* * ID is given 100's place, Class is given 10's place and elements are given Digit's place */

/* * It comes out into a 3-digit no. like this _ _ _ and in this the no. of all the ids,classes and elements of the selector are put in the respective places and then compared */

/* * And the higher score selector will style the thing according to it's settings */

/* * This 3-digit no. doesn't act like normal no. system, we could 50 element selectors but 1 class/id selector can outclass them style the specific element */

/* ! Remember, it only wins on giving the style of the attribute that has come into conflict between 2 or more selectors,
   ! other styles which don't conflict will still be applied even from both the lower and higher score selectors
*/

/* ? NOTE: Inline Styles have more speciality than others that have been discussed */

/* * Avoid Inline styles for these reasons */

/* * Also there exists something known as !important */

/* * It is kept after the attribute in question, e.g. color: red !important */

/* * And !important automatically becomes the default style for that while ignoring specificity */

/* ! Selectors */

/* * The tag name like h1,a,br is needed to style them using CSS */

/* ! Color Attribute */

/* * Assigns colour to the text available */

/* ! Background-Color Attribute */

/* * Assigns only colour to the background of the given text block */

/* ! Different ways of using colours in CSS */

/* ! RGB(redvalue, greenvalue, bluevalue) */

/* * There are 140 named colours, which are very limited */

/* * To access other colours we use rgb(redvalue, greenvalue, bluevalue) */

/* * Each value can go b/w 0-255 both inclusive */

/* * This helps to tune which colour we want specifically */

/* * We can the values for the colour we want using colour picker/pallettes online */

/* * It's an additive colour system */

/* ! Hexadecimal System */

/* * By  using the hexadecimal system, colours are assigned some value, which helps us pick us the shade of colour we want */

/* * The syntax is: #000000 (This is black)*/

/* * The first two characters after # is for the red, the next two for green and last two for blue */

/* ? Protip: if the same characters are repeating(#000000), it can be shorten down to #000 and it can be applied to any hexcolour code which has repeating characters for a particular colour channel */

/* * Same as with rgb, use colour picker/pallettes online for choosing any specific colour */

/* * And it's additive colour system too */

/* ! Text Align */

/* * It tells the text where it should be */

/* * The nuance is that the text will be aligned on the space given to the said element block, not on the webpage itself */

/* * We can alter how much space is given to each tag to use text-align more efficiently */

/* ! Font Weight */

/* * Basically, we can set the text to bold, bolder or normal using those keywords and no. */

/* * normal = 400 */

/* ! Text Decoration */

/* * It helps us puts underline, overline, line-through and stuff */

/* * We can also specify the colour of the line and the style of the line */

/* * Can be used to remove the default underlines in anchor tags */

/* * Syntax: text-decoration: [colour(default is black)] underline [wavy, dotted, etc.]; */

/* ! Line-Height */

/* * Adds extra space b/w lines of text */

/* * The no. given is multiplies by the font size of the text to give the appropriate line space */

/* ! Letter-Spacing */

/* * Adds space inbetween the characters of the letters */

/* ! Font Size */

/* * We can set the font size of the text */

/* * The font can be set by either absolute units(pixels, cm, in(inches), etc) or by relative units(em, rem, vh, vw, etc) */

/* * Pixel is used everywhere and 1px for anything is same as the 1px of any other thing but it's not good for responsive sites as pixel size changes in each website */

/* ! Font-Family */

/* * We can assign fonts to the text */

/* * It relies on the built-in fonts in the user browser */

/* * We can assign a primary font but because of the browsers may not come in built in with that font, we can assign back-up fonts */

/* ! Selector List */

/* * We can select multiple elements by just putting a comma */

h1, h2{
    color: #0FF; /* * Can be expanded to #00FFFF */

    background-color: rgb(0, 0, 0); /* * This gives us black */

    text-align: center; /* * All the h1 tag texts are put in the centre */

    text-decoration: gray underline solid;

    font-family: 'Times New Roman', Times, serif; /* * If the browser don't have Times New Roman, the Times font is used and the same for serif */
}

/* *  We see that all the h1 tags turn to aqua, that means our css is linked! */

button{
    font-weight: bolder; /* * Makes the text inside the button bolder */

    color: magenta; /* * The text in the button changes the colours*/
}

p{
    line-height: 1;

    /* letter-spacing: 10px; */

    /* font-size: 0px; */
}

/* ! Universal Selector */

/* * All the elements are selected regardless of their type and will be applied the gived style */

/* * Not a good idea to use it */

/* * Thought the syntax is: */

*{
    background-color: red;
}

/* ! ID Selector */

/* * We can select any specific element using just their id */

/* * Syntax: #idofthetag{styles} */

#username{
    color: blueviolet; /* * This makes the input texts blue violet of the username input tag  */
}

/* ! Class Selector */

/* * They are used to group style some tags */

/* * we use . instead of # to define class selectors */

.datainput{
    background-color: white; /* * The tags is class name datainput have their background changed to white */
}

/* ! Descendent Selector */

/* * Used for selecting elements inside other elements such as any anchor tags present inside the paragraph tag */

/* * They are used to specify tags to style which are inside other specific tags */

/* * We can do it infinite no. of specifications(depending on the html, of course) */

/* * Syntax: grandfather father .... sonwhichwearegonnastyle{} */

/* * We can also put classes and ids are the father element and style the elements inside them */

li a{ /* * Removes the lines below all the anchor tags present in any li element */

    /* * The li tags are themselves have not been styled, only the present anchor tags have been */

    text-decoration: none;
}

/* ! Adjacent Selector */

/* * Used to select elements which are right after some other element */

/* * like if there is a p after a h1, we write it as h1 + p */

/* * This will affect all the p tags which are just after h1 tags */

h1 + p{ /* * Only the p tags after an H1 */
    background-color: white;
}

/* ! Direct Descendent Selector */

/* * Like a Descendent Selector, just that they should not be nested in anything else */

/* * Eg 
<p>
<a></a>
<p><a></a></p>
</p>
*/

/* * For the above example, only the anchor tag not inside any other tag is effected */

/* * Syntax: Father > Child */

form > p > label{ /* * P and Label tags which are not nested in anything else are only effected */
    background-color: white;
}

/* ! Attribute selector */

/* * As in it's name, it selects and styles based on if the element contains that particular attribute */

/* * Majorly used for differentiating between the styles of different input tags */

/* * They are case-sensitive */

input[type = "password"]{ /* * Only those input tags whose attributes are set to password are affected */
    color: aqua;
}

/* * If we want to select on the basis of classes */

/* * We can do it in 2 ways */

/* * nameoftag[class = "nameofclass"] */

/* * nameoftag.nameofclass */

/* input.inputclass{
    background-color: green; /* Changes the bg colour of the input tags of those class attribute */
/*} */

/* * There are other types of things we can put inplace of the = sign */

/* * attribute *= something, finds that specific attribute has that word or not */

/* * attribute $= .something, only styles those tags which have attributes which ends with the .something */

/* ! Psuedo Classes */

/* * What changes should the tags show when any actions occur to them */

/* * Syntax: tag:action */

button:hover{ /* * Whenever the mouse hovers on them, the buttons change colours */
    background-color: aqua;
}

button:active{ /* * When the button is being pressed, it changes to this colour */
    background-color: blueviolet;
}

input[type = "radio"]:checked{ /* * When the checkbox or radio is checked, then it will be styled like this */
    color: green;
}

/* * There is something known as nth-of-type() psuedo class */

/* * It selects the nth tag from repeating tags, nth-of-type(3) will select the 3rd tag of that type */

/* * If we want to select every 3 tag from the repeating tags, nth-of-type(3n) */

/* * If we want to select even or odd only, nth-of-type(even/odd) */

/*button:nth-of-type(2n){
    background-color: green;
} */

/* ! Pseudo Elements */

/* * Used to select particular parts of a tag, like the first letter written in the h1 tag */

/* * Syntax: tag::pseudo-element */

/* * If the tag is not specified, it will be applied to the whole html document */

h2::first-letter{ /* * All the first letters for every h2 tag is effected */
    font-size: 50px;
}

/* * Other Pseudo Elements: */

/* ! ::first-line: the first line of the tag is affected. Used majorly on paragraph tags */

/* ! ::selection: When ever you select some text, like for copying and stuff, we can set what happens to the text while that is happening  */